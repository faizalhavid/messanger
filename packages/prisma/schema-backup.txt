// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * model BaseModel {
 * id        String   @id @default(cuid())
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * deletedAt DateTime?
 * isDeleted Boolean  @default(false)
 * }
 */

// BEGIN ENUMS
// END ENUMS

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  username  String    @unique @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  pubKey    String?   @db.Text
  profile   Profile?
  token     String?   @db.VarChar(255)
  lastLogin DateTime? @default(now())
  isActive  Boolean   @default(true)

  sentConversations    Conversation[]      @relation("SentConversations")
  threadParticipants   ThreadParticipant[]
  thread               Thread[]
  friendships          Friendship[]        @relation("UserFriendships")
  friendOf             Friendship[]        @relation("FriendOfFriendships")
  initiatedFriendships Friendship[]        @relation("InitiatorFriendships")

  marks              MarkObject[]
  ConversationStatus ConversationStatus[]

  @@index([username], name: "idx_username")
  @@index([email], name: "idx_email")
  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String   @map("first_name") @db.VarChar(100)
  lastName    String   @map("last_name") @db.VarChar(100)
  description String   @db.Text
  avatar      String?  @map("avatar") @db.VarChar(255) // URL ke avatar
  bioId       String?  @unique @map("bio_id")
  bio         Biodata? @relation(fields: [bioId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Friendship {
  id            String           @id @default(uuid())
  userId        String
  friendId      String
  currentStatus FriendshipStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  initiatorId   String

  user       User                  @relation("UserFriendships", fields: [userId], references: [id])
  friend     User                  @relation("FriendOfFriendships", fields: [friendId], references: [id])
  initiator  User                  @relation("InitiatedFriendships", fields: [initiatorId], references: [id])
  statusLogs FriendshipStatusLog[] // histori status
  marks      MarkObject[]          @relation("FriendshipMarks")

  @@unique([userId, friendId], name: "unique_friendship_pair")
}

model FriendshipStatusLog {
  id           String           @id @default(uuid())
  friendshipId String
  status       FriendshipStatus
  changedAt    DateTime         @default(now())
  changedById  String

  friendship Friendship @relation(fields: [friendshipId], references: [id], onDelete: Cascade)
  changedBy  User       @relation(fields: [changedById], references: [id])

  @@index([friendshipId])
  @@map("FriendshipStatusLog")
}

model Biodata {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  birthDate DateTime @map("birth_date")
  gender    String   @map("gender") @db.VarChar(10)
  phone     String   @unique @map("phone") @db.VarChar(20)
  address   String   @map("address") @db.VarChar(255)

  Profile Profile[]

  @@map("biodata")
}

model Thread {
  id        String         @id @default(cuid())
  type      ThreadTypeEnum
  name      String? // hanya untuk GROUP
  avatar    String? // hanya untuk GROUP
  creatorId String         @map("createdById")
  creator   User           @relation(fields: [creatorId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // jika ingin soft delete thread
  isDeleted Boolean   @default(false) @map("is_deleted")

  participants ThreadParticipant[]
  messages     Conversation[]
  marks        MarkObject[]        @relation("ThreadMarks")

  @@index([type])
}

model ThreadParticipant {
  id       String @id @default(cuid())
  threadId String
  userId   String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Soft delete, read flag, dll.
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")

  @@unique([threadId, userId])
  @@index([userId])
}

model Conversation {
  id                String    @id @default(cuid())
  threadId          String
  senderId          String
  createdAt         DateTime  @default(now()) @map("created_at")
  isDeletedBySender Boolean   @default(false) @map("is_deleted_by_sender")
  deletedAtBySender DateTime? @map("deleted_at_by_sender")

  content String @db.Text

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation("SentConversations", fields: [senderId], references: [id], onDelete: Cascade)

  conversationStatus   ConversationStatus[]
  marks                MarkObject[]         @relation("ConversationMarks")
  encryptionMetadata   EncryptionMetadata?  @relation(fields: [encryptionMetadataId], references: [id])
  encryptionMetadataId String?

  @@index([threadId])
  @@index([senderId])
}

model EncryptionMetadata {
  id           String         @id @default(cuid())
  iv           String?        @db.VarChar(255) // Initialization Vector (base64)
  version      String?        @default("v1")
  mac          String? // Message Authentication Code (optional)
  createdAt    DateTime       @default(now())
  Conversation Conversation[]

  @@map("encryption_metadata")
}

model MarkObject {
  id               String           @id @default(cuid())
  userId           String
  markableType     MarkableTypeEnum
  markableObjectId String
  marker           String           @db.VarChar(255)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isDeleted        Boolean          @default(false) @map("is_deleted")
  deletedAt        DateTime?        @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversation Conversation @relation("ConversationMarks", fields: [markableObjectId], references: [id], map: "conversation_marks", onDelete: Cascade)
  friendship   Friendship   @relation("FriendshipMarks", fields: [markableObjectId], references: [id], map: "friendship_marks", onDelete: Cascade)
  thread       Thread       @relation("ThreadMarks", fields: [markableObjectId], references: [id], map: "thread_marks", onDelete: Cascade)

  @@unique([userId, markableType, markableObjectId, marker])
  @@index([markableType, markableObjectId])
}

model ConversationStatus {
  id             String    @id @default(cuid())
  conversationId String
  userId         String
  isRead         Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  isEdited       Boolean   @default(false)
  updatedAt      DateTime  @updatedAt
  readAt         DateTime?
  deletedAt      DateTime?
  editedAt       DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@map("conversation_status")
}
