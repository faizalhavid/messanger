// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * model BaseModel {
 * id        String   @id @default(cuid())
 * createdAt DateTime @default(now())
 * updatedAt DateTime @updatedAt
 * deletedAt DateTime?
 * isDeleted Boolean  @default(false)
 * }
 */

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  username  String    @unique @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  profile   Profile?
  token     String?   @db.VarChar(255)
  lastLogin DateTime? @default(now())
  isActive  Boolean   @default(true)

  sentConversations    Conversation[]      @relation("SentConversations")
  threadParticipants   ThreadParticipant[]
  thread               Thread[]
  friendships          Friendship[]        @relation("UserFriendships")
  friendOf             Friendship[]        @relation("FriendOfFriendships")
  initiatedFriendships Friendship[]        @relation("InitiatorFriendships")

  deletedConversation ConversationDelete[]
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  avatar    String?  @map("avatar") @db.VarChar(255) // URL ke avatar
  bioId     String?  @unique @map("bio_id")
  bio       Biodata? @relation(fields: [bioId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Friendship {
  id          String           @id @default(uuid())
  userId      String // always the smaller ID
  friendId    String // always the bigger ID
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  initiatorId String // who sent the request (userId or friendId)

  user      User @relation("UserFriendships", fields: [userId], references: [id])
  friend    User @relation("FriendOfFriendships", fields: [friendId], references: [id])
  initiator User @relation("InitiatorFriendships", fields: [initiatorId], references: [id])

  @@unique([userId, friendId], name: "unique_friendship_pair")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
  DECLINED
}

model Biodata {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  birthDate DateTime @map("birth_date")
  gender    String   @map("gender") @db.VarChar(10)
  phone     String   @unique @map("phone") @db.VarChar(20)
  address   String   @map("address") @db.VarChar(255)

  Profile Profile[]

  @@map("biodata")
}

enum ThreadType {
  PRIVATE
  GROUP
}

/// Thread untuk percakapan (PRIVATE atau GROUP)
model Thread {
  id        String     @id @default(cuid())
  type      ThreadType
  name      String? // hanya untuk GROUP
  avatar    String? // hanya untuk GROUP
  creatorId String     @map("createdById")
  creator   User       @relation(fields: [creatorId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // jika ingin soft delete thread
  isDeleted Boolean   @default(false) @map("is_deleted")

  participants ThreadParticipant[]
  messages     Conversation[]

  @@index([type])
}

model ThreadParticipant {
  id       String @id @default(cuid())
  threadId String
  userId   String
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Soft delete, read flag, dll.
  isDeleted Boolean   @default(false) @map("is_deleted")
  isRead    Boolean   @default(false) @map("is_read")
  deletedAt DateTime? @map("deleted_at")

  @@unique([threadId, userId])
  @@index([userId])
}

model Conversation {
  id        String   @id @default(cuid())
  threadId  String
  senderId  String
  createdAt DateTime @default(now()) @map("created_at")

  isDeleted            Boolean              @default(false) @map("is_deleted")
  deletedAt            DateTime?            @map("deleted_at")
  isDeletedBySender    Boolean              @default(false)
  deletedByParticipant ConversationDelete[]

  updatedAt DateTime @updatedAt @map("updated_at")
  isEdited  Boolean  @default(false) @map("is_edited")

  content String @db.Text

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation("SentConversations", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([senderId])
}

model ConversationDelete {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  deletedAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}
